// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type Face struct {
	Face                 []float32 `protobuf:"fixed32,1,rep,packed,name=face,proto3" json:"face,omitempty"`
	Jumin                string    `protobuf:"bytes,2,opt,name=jumin,proto3" json:"jumin,omitempty"`
	Name                 string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Face) Reset()         { *m = Face{} }
func (m *Face) String() string { return proto.CompactTextString(m) }
func (*Face) ProtoMessage()    {}
func (*Face) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{0}
}

func (m *Face) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Face.Unmarshal(m, b)
}
func (m *Face) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Face.Marshal(b, m, deterministic)
}
func (m *Face) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Face.Merge(m, src)
}
func (m *Face) XXX_Size() int {
	return xxx_messageInfo_Face.Size(m)
}
func (m *Face) XXX_DiscardUnknown() {
	xxx_messageInfo_Face.DiscardUnknown(m)
}

var xxx_messageInfo_Face proto.InternalMessageInfo

func (m *Face) GetFace() []float32 {
	if m != nil {
		return m.Face
	}
	return nil
}

func (m *Face) GetJumin() string {
	if m != nil {
		return m.Jumin
	}
	return ""
}

func (m *Face) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type Res struct {
	Jumin                string   `protobuf:"bytes,1,opt,name=jumin,proto3" json:"jumin,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Res) Reset()         { *m = Res{} }
func (m *Res) String() string { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()    {}
func (*Res) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{1}
}

func (m *Res) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Res.Unmarshal(m, b)
}
func (m *Res) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Res.Marshal(b, m, deterministic)
}
func (m *Res) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Res.Merge(m, src)
}
func (m *Res) XXX_Size() int {
	return xxx_messageInfo_Res.Size(m)
}
func (m *Res) XXX_DiscardUnknown() {
	xxx_messageInfo_Res.DiscardUnknown(m)
}

var xxx_messageInfo_Res proto.InternalMessageInfo

func (m *Res) GetJumin() string {
	if m != nil {
		return m.Jumin
	}
	return ""
}

func (m *Res) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Face)(nil), "proto.Face")
	proto.RegisterType((*Res)(nil), "proto.Res")
}

func init() { proto.RegisterFile("proto.proto", fileDescriptor_2fcc84b9998d60d8) }

var fileDescriptor_2fcc84b9998d60d8 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x03, 0x93, 0x42, 0xac, 0x60, 0x4a, 0xc9, 0x85, 0x8b, 0xc5, 0x2d, 0x31, 0x39, 0x55,
	0x48, 0x88, 0x8b, 0x25, 0x2d, 0x31, 0x39, 0x55, 0x82, 0x51, 0x81, 0x59, 0x83, 0x29, 0x08, 0xcc,
	0x16, 0x12, 0xe1, 0x62, 0xcd, 0x2a, 0xcd, 0xcd, 0xcc, 0x93, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c,
	0x82, 0x70, 0x40, 0x2a, 0xf3, 0x12, 0x73, 0x53, 0x25, 0x98, 0xc1, 0x82, 0x60, 0xb6, 0x92, 0x3e,
	0x17, 0x73, 0x50, 0x6a, 0x31, 0x42, 0x03, 0x23, 0x36, 0x0d, 0x4c, 0x08, 0x0d, 0x46, 0x9a, 0x20,
	0x0d, 0xc9, 0x42, 0x4a, 0x5c, 0xac, 0x41, 0xa9, 0xc9, 0xf9, 0xe9, 0x42, 0xdc, 0x10, 0x57, 0xe9,
	0x81, 0xdc, 0x22, 0xc5, 0x05, 0xe5, 0x04, 0xa5, 0x16, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0x39, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x9f, 0xb0, 0x13, 0xbe, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecClient is the client API for Rec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecClient interface {
	// Sends a greeting
	Recog(ctx context.Context, in *Face, opts ...grpc.CallOption) (*Res, error)
}

type recClient struct {
	cc *grpc.ClientConn
}

func NewRecClient(cc *grpc.ClientConn) RecClient {
	return &recClient{cc}
}

func (c *recClient) Recog(ctx context.Context, in *Face, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.Rec/Recog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecServer is the server API for Rec service.
type RecServer interface {
	// Sends a greeting
	Recog(context.Context, *Face) (*Res, error)
}

// UnimplementedRecServer can be embedded to have forward compatible implementations.
type UnimplementedRecServer struct {
}

func (*UnimplementedRecServer) Recog(ctx context.Context, req *Face) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recog not implemented")
}

func RegisterRecServer(s *grpc.Server, srv RecServer) {
	s.RegisterService(&_Rec_serviceDesc, srv)
}

func _Rec_Recog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Face)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecServer).Recog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rec/Recog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecServer).Recog(ctx, req.(*Face))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Rec",
	HandlerType: (*RecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recog",
			Handler:    _Rec_Recog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
